from typing_extensions import dataclass_transform
from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

file_path = '/content/drive/My Drive/bf3_data_2022_01_07.xlsx'
data = pd.read_excel(file_path)

# Display first few rows of the dataset
print(data.head())

# Check for missing values
print(data.isnull().sum())

# Handle missing values by imputing the mean for numeric columns
data.fillna(data.mean(), inplace=True)

# Confirm there are no missing values
print(data.isnull().sum())
data['CO_CO2_Ratio'] = data['CO'] / data['CO2']
# Extract features and target variable
print
X = data.drop(columns=['CO2', 'CO',  'CO_CO2_Ratio'])
y = data['CO_CO2_Ratio']
# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train two models and evaluate them
models = {
    'LinearRegression': LinearRegression(),
    'RandomForestRegressor': RandomForestRegressor(n_estimators=100, random_state=42)
}

results = {}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    results[name] = {'model': model, 'mse': mse, 'r2': r2}
    print(f'{name} - MSE: {mse}, R2: {r2}')

# Select the best model based on R2 score
best_model_name = max(results, key=lambda x: results[x]['r2'])
best_model = results[best_model_name]['model']
print(f'Best model: {best_model_name}')

# Plotting the actual vs predicted values for the best model
plt.figure(figsize=(10, 6))
plt.scatter(y_test, results[best_model_name]['model'].predict(X_test), alpha=0.7)
plt.xlabel('Actual CO/CO2 Ratio')
plt.ylabel('Predicted CO/CO2 Ratio')
plt.title(f'Actual vs Predicted CO/CO2 Ratio using {best_model_name}')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', lw=2)
plt.show()
# Making a single prediction
new_data = np.array([[311727, 3.15, 129, 4, 213, 3.34, 3.2, 7296, 23.08, 32, 24.56, 1060, 2.99, 1.5, 112, 135, 107, 130, 0, 121, 2, 3.88, 69.9]])
new_data_pred = best_model.predict(new_data)
print(f'Predicted CO2: {new_data_pred[0]}')
